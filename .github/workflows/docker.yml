name: Docker GHA

on:
  # push:
  #   branches:
  #     - main
  #   tags:
  #     - "v*.*.*"
  pull_request:
  workflow_dispatch:
    inputs:
      depends:
        description: 'Create depends image'
        required: true
        type: boolean
        default: true
      r_version:
        description: 'R version to use'
        required: true
        type: choice
        default: "4.1"
        options:
          - 4.1
          - 4.2
          - 4.3

# set up the environment, either input or default
env:
  R_VERSION: ${{ github.event.inputs.r_version || '4.1' }}

# there are 3 jobs to build different images
jobs:
  # ----------------------------------------------------------------------
  # depends image has all the dependencies installed
  # ----------------------------------------------------------------------
  depends:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v4

      # create metadata for image
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            pecan/depends
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/depends
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # setup docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # login to registries
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build the docker images
      - name: Build and push depends
        uses: docker/build-push-action@v6
        with:
          context: docker/depends
          file: docker/depends/Dockerfile
          push: true
          platforms: "linux/amd64"
          cache-from: type=registry,ref=pecan/depends:buildcache
          cache-to: type=registry,ref=pecan/depends:buildcache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/depends.tar
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            R_VERSION=${{ env.R_VERSION }}
            GITHUB_PAT=${{ secrets.GITHUB_TOKEN }}

      # upload depends image to be used in other steps
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: depends
          path: /tmp/depends.tar

  # ----------------------------------------------------------------------
  # base image has PEcAn compiled and installed, and depends on depends
  # ----------------------------------------------------------------------
  base:
    runs-on: ubuntu-latest
    needs: depends
    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v4

      # load cached image
      - name: Retrieve compiled binary
        uses: actions/download-artifact@v4
        with:
          name: depends
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/depends.tar

      # create metadata for image
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            pecan/base
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/base
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # setup docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # login to registries
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build the docker images
      - name: Build and push base
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/base/Dockerfile
          push: true
          platforms: "linux/amd64"
          cache-from: type=registry,ref=pecan/base:buildcache
          cache-to: type=registry,ref=pecan/base:buildcache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/base.tar
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            R_VERSION=${{ env.R_VERSION }}
            FROM_IMAGE=depends
            IMAGE_VERSION=${{ steps.meta.outputs.version }}
            GITHUB_PAT=${{ secrets.GITHUB_TOKEN }}
            PECAN_VERSION=${{ steps.meta.outputs.version }}
            PECAN_GIT_BRANCH= ${{ github.head_ref || github.ref_name }} 
            PECAN_GIT_CHECKSUM=${{ github.sha }}
            PECAN_GIT_DATE=${{ github.event.repository.updated_at }}
    
      # upload base image to be used in other steps
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: base
          path: /tmp/base.tar

  # ----------------------------------------------------------------------
  # Next are images that depend on base image
  # ----------------------------------------------------------------------
  baseplus:
    runs-on: ubuntu-latest
    needs: base
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        name:
          - docs
          - models
          - executor
        include:
          - name: docs
            CONTEXT: .
            DOCKERFILE: docker/docs/Dockerfile
            PLATFORM: "linux/amd64"
            IMAGE: docs
          - name: models
            CONTEXT: docker/models
            DOCKERFILE: docker/models/Dockerfile
            PLATFORM: "linux/amd64"
            IMAGE: models
          - name: executor
            CONTEXT: docker/executor
            DOCKERFILE: docker/executor/Dockerfile
            PLATFORM: "linux/amd64"
            IMAGE: executor

    steps:
      - uses: actions/checkout@v4

      # load cached image
      - name: Retrieve compiled binary
        uses: actions/download-artifact@v4
        with:
          name: base
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/base.tar
    
      # create metadata for image
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            pecan/${{ matrix.IMAGE }}
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/${{ matrix.IMAGE }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # setup docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # login to registries
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build the docker images
      - name: Build and push ${{ matrix.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.CONTEXT }}
          file: ${{ matrix.DOCKERFILE }}
          push: true
          platforms: ${{ matrix.PLATFORM }}
          cache-from: type=registry,ref=pecan/${{ matrix.IMAGE }}:buildcache
          cache-to: type=registry,ref=pecan/${{ matrix.IMAGE }}:buildcache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/${{ matrix.name }}.tar
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            R_VERSION=${{ env.R_VERSION }}

      # upload base image to be used in other steps
      - name: Upload artifact
        if: ${{ matrix.name == 'models' }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: models
          path: /tmp/models.tar

# ----------------------------------------------------------------------
# Next are images that have models installed
# ----------------------------------------------------------------------
  models:
    runs-on: ubuntu-latest
    needs: baseplus
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - CONTEXT: models/basgra
            DOCKERFILE: models/basgra/Dockerfile
            PLATFORM: "linux/amd64"
            MODEL: basgra
            VERSION: BASGRA_N_v1
            VERSION_LOWER: basgra_n_v1
          - CONTEXT: models/biocro
            DOCKERFILE: models/biocro/Dockerfile
            PLATFORM: "linux/amd64"
            MODEL: biocro
            VERSION: "0.95"
          - CONTEXT: models/ed
            DOCKERFILE: models/ed/Dockerfile
            PLATFORM: "linux/amd64"
            MODEL: ed2
            VERSION: "2.2.0"
          - CONTEXT: models/ed
            DOCKERFILE: models/ed/Dockerfile
            PLATFORM: "linux/amd64"
            MODEL: ed2
            VERSION: "git"
          - CONTEXT: models/maespa
            DOCKERFILE: models/maespa/Dockerfile
            PLATFORM: "linux/amd64"
            MODEL: maespa
            VERSION: "git"
          - CONTEXT: models/sipnet
            DOCKERFILE: models/sipnet/Dockerfile
            PLATFORM: "linux/amd64"
            MODEL: sipnet
            VERSION: "git"

    steps:
      - uses: actions/checkout@v4

      # load cached image
      - name: Retrieve compiled binary
        uses: actions/download-artifact@v4
        with:
          name: models
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/models.tar
    
      # create metadata for image
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            pecan/model-${{ matrix.MODEL }}-${{ matrix.VERSION }}
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/model-${{ matrix.MODEL }}-${{ matrix.VERSION_LOWER || matrix.VERSION }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # setup docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # login to registries
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker image ls
        run: docker image ls

      # build the docker images
      - name: Build and push ${{ matrix.MODEL }} ${{ matrix.VERSION }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.CONTEXT }}
          file: ${{ matrix.DOCKERFILE }}
          push: true
          platforms: ${{ matrix.PLATFORM }}
          cache-from: type=registry,ref=pecan/model-${{ matrix.MODEL }}-${{ matrix.VERSION }}:buildcache
          cache-to: type=registry,ref=pecan/model-${{ matrix.MODEL }}-${{ matrix.VERSION }}:buildcache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            R_VERSION=${{ env.R_VERSION }}
            MODEL_VERSION=${{ matrix.VERSION }}
            IMAGE_VERSION=${{ steps.meta.outputs.version }}
            BINARY_VERSION="2.2"
    
  # ----------------------------------------------------------------------
  # Next are images that do not depend on either depends or base image
  # ----------------------------------------------------------------------
  extras:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        name:
          - web
          - dbsync
          - data 
          - monitor 
          - rstudio-nginx
        include:
          - name: web
            CONTEXT: .
            DOCKERFILE: docker/web/Dockerfile
            PLATFORM: "linux/amd64,linux/arm64"
            IMAGE: web
          - name: dbsync
            CONTEXT: .
            DOCKERFILE: shiny/dbsync/Dockerfile
            PLATFORM: "linux/amd64"
            IMAGE: shiny-dbsync
          - name: data
            CONTEXT: docker/data
            DOCKERFILE: docker/data/Dockerfile
            PLATFORM: "linux/amd64,linux/arm64"
            IMAGE: data
          - name: monitor
            CONTEXT: docker/monitor
            DOCKERFILE: docker/monitor/Dockerfile
            PLATFORM: "linux/amd64,linux/arm64"
            IMAGE: monitor
          - name: rstudio-nginx
            CONTEXT: docker/rstudio-nginx
            DOCKERFILE: docker/rstudio-nginx/Dockerfile
            PLATFORM: "linux/amd64,linux/arm64"
            IMAGE: rstudio-nginx

    steps:
      - uses: actions/checkout@v4

      # create metadata for image
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            pecan/${{ matrix.IMAGE }}
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/${{ matrix.IMAGE }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # setup docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # login to registries
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build the docker images
      - name: Build and push ${{ matrix.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.CONTEXT }}
          file: ${{ matrix.DOCKERFILE }}
          push: true
          platforms: ${{ matrix.PLATFORM }}
          cache-from: type=registry,ref=pecan/${{ matrix.IMAGE }}:buildcache
          cache-to: type=registry,ref=pecan/${{ matrix.IMAGE }}:buildcache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            R_VERSION=${{ env.R_VERSION }}
